// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaStoreResolverClient is the client API for MediaStoreResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaStoreResolverClient interface {
	GetMediaFilesInfo(ctx context.Context, in *MediaType, opts ...grpc.CallOption) (*MediaStoreInfoList, error)
	GetMediaFileThumbnail(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_GetMediaFileThumbnailClient, error)
	DeleteMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	DownloadMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_DownloadMediaFileClient, error)
}

type mediaStoreResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaStoreResolverClient(cc grpc.ClientConnInterface) MediaStoreResolverClient {
	return &mediaStoreResolverClient{cc}
}

func (c *mediaStoreResolverClient) GetMediaFilesInfo(ctx context.Context, in *MediaType, opts ...grpc.CallOption) (*MediaStoreInfoList, error) {
	out := new(MediaStoreInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.MediaStoreResolver/GetMediaFilesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStoreResolverClient) GetMediaFileThumbnail(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_GetMediaFileThumbnailClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStoreResolver_ServiceDesc.Streams[0], "/protobuf.MediaStoreResolver/GetMediaFileThumbnail", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStoreResolverGetMediaFileThumbnailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaStoreResolver_GetMediaFileThumbnailClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type mediaStoreResolverGetMediaFileThumbnailClient struct {
	grpc.ClientStream
}

func (x *mediaStoreResolverGetMediaFileThumbnailClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaStoreResolverClient) DeleteMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MediaStoreResolver/DeleteMediaFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStoreResolverClient) DownloadMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_DownloadMediaFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStoreResolver_ServiceDesc.Streams[1], "/protobuf.MediaStoreResolver/DownloadMediaFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStoreResolverDownloadMediaFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaStoreResolver_DownloadMediaFileClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type mediaStoreResolverDownloadMediaFileClient struct {
	grpc.ClientStream
}

func (x *mediaStoreResolverDownloadMediaFileClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaStoreResolverServer is the server API for MediaStoreResolver service.
// All implementations must embed UnimplementedMediaStoreResolverServer
// for forward compatibility
type MediaStoreResolverServer interface {
	GetMediaFilesInfo(context.Context, *MediaType) (*MediaStoreInfoList, error)
	GetMediaFileThumbnail(*String, MediaStoreResolver_GetMediaFileThumbnailServer) error
	DeleteMediaFile(context.Context, *String) (*Empty, error)
	DownloadMediaFile(*String, MediaStoreResolver_DownloadMediaFileServer) error
	mustEmbedUnimplementedMediaStoreResolverServer()
}

// UnimplementedMediaStoreResolverServer must be embedded to have forward compatible implementations.
type UnimplementedMediaStoreResolverServer struct {
}

func (UnimplementedMediaStoreResolverServer) GetMediaFilesInfo(context.Context, *MediaType) (*MediaStoreInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaFilesInfo not implemented")
}
func (UnimplementedMediaStoreResolverServer) GetMediaFileThumbnail(*String, MediaStoreResolver_GetMediaFileThumbnailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMediaFileThumbnail not implemented")
}
func (UnimplementedMediaStoreResolverServer) DeleteMediaFile(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaFile not implemented")
}
func (UnimplementedMediaStoreResolverServer) DownloadMediaFile(*String, MediaStoreResolver_DownloadMediaFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMediaFile not implemented")
}
func (UnimplementedMediaStoreResolverServer) mustEmbedUnimplementedMediaStoreResolverServer() {}

// UnsafeMediaStoreResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaStoreResolverServer will
// result in compilation errors.
type UnsafeMediaStoreResolverServer interface {
	mustEmbedUnimplementedMediaStoreResolverServer()
}

func RegisterMediaStoreResolverServer(s grpc.ServiceRegistrar, srv MediaStoreResolverServer) {
	s.RegisterService(&MediaStoreResolver_ServiceDesc, srv)
}

func _MediaStoreResolver_GetMediaFilesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStoreResolverServer).GetMediaFilesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MediaStoreResolver/GetMediaFilesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStoreResolverServer).GetMediaFilesInfo(ctx, req.(*MediaType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStoreResolver_GetMediaFileThumbnail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaStoreResolverServer).GetMediaFileThumbnail(m, &mediaStoreResolverGetMediaFileThumbnailServer{stream})
}

type MediaStoreResolver_GetMediaFileThumbnailServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type mediaStoreResolverGetMediaFileThumbnailServer struct {
	grpc.ServerStream
}

func (x *mediaStoreResolverGetMediaFileThumbnailServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _MediaStoreResolver_DeleteMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStoreResolverServer).DeleteMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MediaStoreResolver/DeleteMediaFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStoreResolverServer).DeleteMediaFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStoreResolver_DownloadMediaFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaStoreResolverServer).DownloadMediaFile(m, &mediaStoreResolverDownloadMediaFileServer{stream})
}

type MediaStoreResolver_DownloadMediaFileServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type mediaStoreResolverDownloadMediaFileServer struct {
	grpc.ServerStream
}

func (x *mediaStoreResolverDownloadMediaFileServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

// MediaStoreResolver_ServiceDesc is the grpc.ServiceDesc for MediaStoreResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaStoreResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MediaStoreResolver",
	HandlerType: (*MediaStoreResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMediaFilesInfo",
			Handler:    _MediaStoreResolver_GetMediaFilesInfo_Handler,
		},
		{
			MethodName: "DeleteMediaFile",
			Handler:    _MediaStoreResolver_DeleteMediaFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMediaFileThumbnail",
			Handler:       _MediaStoreResolver_GetMediaFileThumbnail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadMediaFile",
			Handler:       _MediaStoreResolver_DownloadMediaFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/MediaStoreResolver.proto",
}
