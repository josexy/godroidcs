// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallLogResolverClient is the client API for CallLogResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallLogResolverClient interface {
	GetAllCallLogInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CallLogMetaInfoList, error)
	GetCallLogInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*CallLogInfoList, error)
	DeleteCallLog(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
}

type callLogResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewCallLogResolverClient(cc grpc.ClientConnInterface) CallLogResolverClient {
	return &callLogResolverClient{cc}
}

func (c *callLogResolverClient) GetAllCallLogInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CallLogMetaInfoList, error) {
	out := new(CallLogMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.CallLogResolver/GetAllCallLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callLogResolverClient) GetCallLogInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*CallLogInfoList, error) {
	out := new(CallLogInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.CallLogResolver/GetCallLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callLogResolverClient) DeleteCallLog(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.CallLogResolver/DeleteCallLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallLogResolverServer is the server API for CallLogResolver service.
// All implementations must embed UnimplementedCallLogResolverServer
// for forward compatibility
type CallLogResolverServer interface {
	GetAllCallLogInfo(context.Context, *Empty) (*CallLogMetaInfoList, error)
	GetCallLogInfo(context.Context, *String) (*CallLogInfoList, error)
	DeleteCallLog(context.Context, *String) (*Empty, error)
	mustEmbedUnimplementedCallLogResolverServer()
}

// UnimplementedCallLogResolverServer must be embedded to have forward compatible implementations.
type UnimplementedCallLogResolverServer struct {
}

func (UnimplementedCallLogResolverServer) GetAllCallLogInfo(context.Context, *Empty) (*CallLogMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCallLogInfo not implemented")
}
func (UnimplementedCallLogResolverServer) GetCallLogInfo(context.Context, *String) (*CallLogInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallLogInfo not implemented")
}
func (UnimplementedCallLogResolverServer) DeleteCallLog(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCallLog not implemented")
}
func (UnimplementedCallLogResolverServer) mustEmbedUnimplementedCallLogResolverServer() {}

// UnsafeCallLogResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallLogResolverServer will
// result in compilation errors.
type UnsafeCallLogResolverServer interface {
	mustEmbedUnimplementedCallLogResolverServer()
}

func RegisterCallLogResolverServer(s grpc.ServiceRegistrar, srv CallLogResolverServer) {
	s.RegisterService(&CallLogResolver_ServiceDesc, srv)
}

func _CallLogResolver_GetAllCallLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallLogResolverServer).GetAllCallLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CallLogResolver/GetAllCallLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallLogResolverServer).GetAllCallLogInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallLogResolver_GetCallLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallLogResolverServer).GetCallLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CallLogResolver/GetCallLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallLogResolverServer).GetCallLogInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallLogResolver_DeleteCallLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallLogResolverServer).DeleteCallLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CallLogResolver/DeleteCallLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallLogResolverServer).DeleteCallLog(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

// CallLogResolver_ServiceDesc is the grpc.ServiceDesc for CallLogResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallLogResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.CallLogResolver",
	HandlerType: (*CallLogResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCallLogInfo",
			Handler:    _CallLogResolver_GetAllCallLogInfo_Handler,
		},
		{
			MethodName: "GetCallLogInfo",
			Handler:    _CallLogResolver_GetCallLogInfo_Handler,
		},
		{
			MethodName: "DeleteCallLog",
			Handler:    _CallLogResolver_DeleteCallLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/CallLogResolver.proto",
}
