// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/PmResolver.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_PmResolver_proto protoreflect.FileDescriptor

var file_proto_PmResolver_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x50, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xde, 0x07, 0x0a, 0x0a, 0x50, 0x6d, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x41, 0x70, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x41, 0x70, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x70, 0x6b, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x40, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e,
	0x6a, 0x6f, 0x78, 0x72, 0x61, 0x79, 0x73, 0x2e, 0x67, 0x6f, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x73,
	0x76, 0x72, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x0f, 0x50, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x01, 0x5a, 0x0a,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_proto_PmResolver_proto_goTypes = []interface{}{
	(*Empty)(nil),               // 0: protobuf.Empty
	(*String)(nil),              // 1: protobuf.String
	(*ParamBytes)(nil),          // 2: protobuf.ParamBytes
	(*PackageMetaInfoList)(nil), // 3: protobuf.PackageMetaInfoList
	(*ApplicationInfo)(nil),     // 4: protobuf.ApplicationInfo
	(*PackageInfo)(nil),         // 5: protobuf.PackageInfo
	(*AppSize)(nil),             // 6: protobuf.AppSize
	(*Status)(nil),              // 7: protobuf.Status
	(*Bytes)(nil),               // 8: protobuf.Bytes
	(*StringList)(nil),          // 9: protobuf.StringList
}
var file_proto_PmResolver_proto_depIdxs = []int32{
	0,  // 0: protobuf.PmResolver.GetAllPackageInfo:input_type -> protobuf.Empty
	0,  // 1: protobuf.PmResolver.GetAllUserPackageInfo:input_type -> protobuf.Empty
	0,  // 2: protobuf.PmResolver.GetAllSystemPackageInfo:input_type -> protobuf.Empty
	1,  // 3: protobuf.PmResolver.GetApplicationInfo:input_type -> protobuf.String
	1,  // 4: protobuf.PmResolver.GetPackageInfo:input_type -> protobuf.String
	1,  // 5: protobuf.PmResolver.GetApplicationSize:input_type -> protobuf.String
	1,  // 6: protobuf.PmResolver.UninstallApk:input_type -> protobuf.String
	2,  // 7: protobuf.PmResolver.InstallApk:input_type -> protobuf.ParamBytes
	1,  // 8: protobuf.PmResolver.GetApk:input_type -> protobuf.String
	1,  // 9: protobuf.PmResolver.GetIcon:input_type -> protobuf.String
	1,  // 10: protobuf.PmResolver.GetPermissions:input_type -> protobuf.String
	1,  // 11: protobuf.PmResolver.GetActivities:input_type -> protobuf.String
	1,  // 12: protobuf.PmResolver.GetServices:input_type -> protobuf.String
	1,  // 13: protobuf.PmResolver.GetReceivers:input_type -> protobuf.String
	1,  // 14: protobuf.PmResolver.GetSharedLibFiles:input_type -> protobuf.String
	1,  // 15: protobuf.PmResolver.GetProviders:input_type -> protobuf.String
	3,  // 16: protobuf.PmResolver.GetAllPackageInfo:output_type -> protobuf.PackageMetaInfoList
	3,  // 17: protobuf.PmResolver.GetAllUserPackageInfo:output_type -> protobuf.PackageMetaInfoList
	3,  // 18: protobuf.PmResolver.GetAllSystemPackageInfo:output_type -> protobuf.PackageMetaInfoList
	4,  // 19: protobuf.PmResolver.GetApplicationInfo:output_type -> protobuf.ApplicationInfo
	5,  // 20: protobuf.PmResolver.GetPackageInfo:output_type -> protobuf.PackageInfo
	6,  // 21: protobuf.PmResolver.GetApplicationSize:output_type -> protobuf.AppSize
	0,  // 22: protobuf.PmResolver.UninstallApk:output_type -> protobuf.Empty
	7,  // 23: protobuf.PmResolver.InstallApk:output_type -> protobuf.Status
	1,  // 24: protobuf.PmResolver.GetApk:output_type -> protobuf.String
	8,  // 25: protobuf.PmResolver.GetIcon:output_type -> protobuf.Bytes
	9,  // 26: protobuf.PmResolver.GetPermissions:output_type -> protobuf.StringList
	9,  // 27: protobuf.PmResolver.GetActivities:output_type -> protobuf.StringList
	9,  // 28: protobuf.PmResolver.GetServices:output_type -> protobuf.StringList
	9,  // 29: protobuf.PmResolver.GetReceivers:output_type -> protobuf.StringList
	9,  // 30: protobuf.PmResolver.GetSharedLibFiles:output_type -> protobuf.StringList
	9,  // 31: protobuf.PmResolver.GetProviders:output_type -> protobuf.StringList
	16, // [16:32] is the sub-list for method output_type
	0,  // [0:16] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_PmResolver_proto_init() }
func file_proto_PmResolver_proto_init() {
	if File_proto_PmResolver_proto != nil {
		return
	}
	file_proto_Message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_PmResolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_PmResolver_proto_goTypes,
		DependencyIndexes: file_proto_PmResolver_proto_depIdxs,
	}.Build()
	File_proto_PmResolver_proto = out.File
	file_proto_PmResolver_proto_rawDesc = nil
	file_proto_PmResolver_proto_goTypes = nil
	file_proto_PmResolver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PmResolverClient is the client API for PmResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PmResolverClient interface {
	GetAllPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error)
	GetAllUserPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error)
	GetAllSystemPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error)
	GetApplicationInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*ApplicationInfo, error)
	GetPackageInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*PackageInfo, error)
	GetApplicationSize(ctx context.Context, in *String, opts ...grpc.CallOption) (*AppSize, error)
	UninstallApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	InstallApk(ctx context.Context, opts ...grpc.CallOption) (PmResolver_InstallApkClient, error)
	GetApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetIcon(ctx context.Context, in *String, opts ...grpc.CallOption) (PmResolver_GetIconClient, error)
	GetPermissions(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetActivities(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetServices(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetReceivers(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetSharedLibFiles(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetProviders(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
}

type pmResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewPmResolverClient(cc grpc.ClientConnInterface) PmResolverClient {
	return &pmResolverClient{cc}
}

func (c *pmResolverClient) GetAllPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error) {
	out := new(PackageMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetAllPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetAllUserPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error) {
	out := new(PackageMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetAllUserPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetAllSystemPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error) {
	out := new(PackageMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetAllSystemPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetApplicationInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*ApplicationInfo, error) {
	out := new(ApplicationInfo)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetApplicationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetPackageInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*PackageInfo, error) {
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetApplicationSize(ctx context.Context, in *String, opts ...grpc.CallOption) (*AppSize, error) {
	out := new(AppSize)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetApplicationSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) UninstallApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/UninstallApk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) InstallApk(ctx context.Context, opts ...grpc.CallOption) (PmResolver_InstallApkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PmResolver_serviceDesc.Streams[0], "/protobuf.PmResolver/InstallApk", opts...)
	if err != nil {
		return nil, err
	}
	x := &pmResolverInstallApkClient{stream}
	return x, nil
}

type PmResolver_InstallApkClient interface {
	Send(*ParamBytes) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type pmResolverInstallApkClient struct {
	grpc.ClientStream
}

func (x *pmResolverInstallApkClient) Send(m *ParamBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pmResolverInstallApkClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pmResolverClient) GetApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetApk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetIcon(ctx context.Context, in *String, opts ...grpc.CallOption) (PmResolver_GetIconClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PmResolver_serviceDesc.Streams[1], "/protobuf.PmResolver/GetIcon", opts...)
	if err != nil {
		return nil, err
	}
	x := &pmResolverGetIconClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PmResolver_GetIconClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type pmResolverGetIconClient struct {
	grpc.ClientStream
}

func (x *pmResolverGetIconClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pmResolverClient) GetPermissions(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetActivities(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetServices(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetReceivers(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetReceivers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetSharedLibFiles(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetSharedLibFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetProviders(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmResolverServer is the server API for PmResolver service.
type PmResolverServer interface {
	GetAllPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error)
	GetAllUserPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error)
	GetAllSystemPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error)
	GetApplicationInfo(context.Context, *String) (*ApplicationInfo, error)
	GetPackageInfo(context.Context, *String) (*PackageInfo, error)
	GetApplicationSize(context.Context, *String) (*AppSize, error)
	UninstallApk(context.Context, *String) (*Empty, error)
	InstallApk(PmResolver_InstallApkServer) error
	GetApk(context.Context, *String) (*String, error)
	GetIcon(*String, PmResolver_GetIconServer) error
	GetPermissions(context.Context, *String) (*StringList, error)
	GetActivities(context.Context, *String) (*StringList, error)
	GetServices(context.Context, *String) (*StringList, error)
	GetReceivers(context.Context, *String) (*StringList, error)
	GetSharedLibFiles(context.Context, *String) (*StringList, error)
	GetProviders(context.Context, *String) (*StringList, error)
}

// UnimplementedPmResolverServer can be embedded to have forward compatible implementations.
type UnimplementedPmResolverServer struct {
}

func (*UnimplementedPmResolverServer) GetAllPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPackageInfo not implemented")
}
func (*UnimplementedPmResolverServer) GetAllUserPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserPackageInfo not implemented")
}
func (*UnimplementedPmResolverServer) GetAllSystemPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSystemPackageInfo not implemented")
}
func (*UnimplementedPmResolverServer) GetApplicationInfo(context.Context, *String) (*ApplicationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationInfo not implemented")
}
func (*UnimplementedPmResolverServer) GetPackageInfo(context.Context, *String) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageInfo not implemented")
}
func (*UnimplementedPmResolverServer) GetApplicationSize(context.Context, *String) (*AppSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationSize not implemented")
}
func (*UnimplementedPmResolverServer) UninstallApk(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallApk not implemented")
}
func (*UnimplementedPmResolverServer) InstallApk(PmResolver_InstallApkServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallApk not implemented")
}
func (*UnimplementedPmResolverServer) GetApk(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApk not implemented")
}
func (*UnimplementedPmResolverServer) GetIcon(*String, PmResolver_GetIconServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIcon not implemented")
}
func (*UnimplementedPmResolverServer) GetPermissions(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedPmResolverServer) GetActivities(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (*UnimplementedPmResolverServer) GetServices(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (*UnimplementedPmResolverServer) GetReceivers(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivers not implemented")
}
func (*UnimplementedPmResolverServer) GetSharedLibFiles(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedLibFiles not implemented")
}
func (*UnimplementedPmResolverServer) GetProviders(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}

func RegisterPmResolverServer(s *grpc.Server, srv PmResolverServer) {
	s.RegisterService(&_PmResolver_serviceDesc, srv)
}

func _PmResolver_GetAllPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetAllPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetAllPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetAllPackageInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetAllUserPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetAllUserPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetAllUserPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetAllUserPackageInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetAllSystemPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetAllSystemPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetAllSystemPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetAllSystemPackageInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetApplicationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetApplicationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetApplicationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetApplicationInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetPackageInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetApplicationSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetApplicationSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetApplicationSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetApplicationSize(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_UninstallApk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).UninstallApk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/UninstallApk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).UninstallApk(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_InstallApk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PmResolverServer).InstallApk(&pmResolverInstallApkServer{stream})
}

type PmResolver_InstallApkServer interface {
	SendAndClose(*Status) error
	Recv() (*ParamBytes, error)
	grpc.ServerStream
}

type pmResolverInstallApkServer struct {
	grpc.ServerStream
}

func (x *pmResolverInstallApkServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pmResolverInstallApkServer) Recv() (*ParamBytes, error) {
	m := new(ParamBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PmResolver_GetApk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetApk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetApk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetApk(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetIcon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PmResolverServer).GetIcon(m, &pmResolverGetIconServer{stream})
}

type PmResolver_GetIconServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type pmResolverGetIconServer struct {
	grpc.ServerStream
}

func (x *pmResolverGetIconServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _PmResolver_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetPermissions(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetActivities(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetServices(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetReceivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetReceivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetReceivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetReceivers(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetSharedLibFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetSharedLibFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetSharedLibFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetSharedLibFiles(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetProviders(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _PmResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PmResolver",
	HandlerType: (*PmResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPackageInfo",
			Handler:    _PmResolver_GetAllPackageInfo_Handler,
		},
		{
			MethodName: "GetAllUserPackageInfo",
			Handler:    _PmResolver_GetAllUserPackageInfo_Handler,
		},
		{
			MethodName: "GetAllSystemPackageInfo",
			Handler:    _PmResolver_GetAllSystemPackageInfo_Handler,
		},
		{
			MethodName: "GetApplicationInfo",
			Handler:    _PmResolver_GetApplicationInfo_Handler,
		},
		{
			MethodName: "GetPackageInfo",
			Handler:    _PmResolver_GetPackageInfo_Handler,
		},
		{
			MethodName: "GetApplicationSize",
			Handler:    _PmResolver_GetApplicationSize_Handler,
		},
		{
			MethodName: "UninstallApk",
			Handler:    _PmResolver_UninstallApk_Handler,
		},
		{
			MethodName: "GetApk",
			Handler:    _PmResolver_GetApk_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _PmResolver_GetPermissions_Handler,
		},
		{
			MethodName: "GetActivities",
			Handler:    _PmResolver_GetActivities_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _PmResolver_GetServices_Handler,
		},
		{
			MethodName: "GetReceivers",
			Handler:    _PmResolver_GetReceivers_Handler,
		},
		{
			MethodName: "GetSharedLibFiles",
			Handler:    _PmResolver_GetSharedLibFiles_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _PmResolver_GetProviders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallApk",
			Handler:       _PmResolver_InstallApk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetIcon",
			Handler:       _PmResolver_GetIcon_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/PmResolver.proto",
}
