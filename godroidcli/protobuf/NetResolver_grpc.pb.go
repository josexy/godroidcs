// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetResolverClient is the client API for NetResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetResolverClient interface {
	GetNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetInterfaceInfoList, error)
	GetCurrentWifiInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailWifiInfo, error)
	ScanWifiResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScanWifiInfoList, error)
	CheckNetworkConnectivity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error)
	GetActiveNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailActiveNetworkInfoList, error)
	GetPublicNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicNetworkInfo, error)
}

type netResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewNetResolverClient(cc grpc.ClientConnInterface) NetResolverClient {
	return &netResolverClient{cc}
}

func (c *netResolverClient) GetNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetInterfaceInfoList, error) {
	out := new(NetInterfaceInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) GetCurrentWifiInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailWifiInfo, error) {
	out := new(DetailWifiInfo)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetCurrentWifiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) ScanWifiResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScanWifiInfoList, error) {
	out := new(ScanWifiInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/ScanWifiResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) CheckNetworkConnectivity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/CheckNetworkConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) GetActiveNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailActiveNetworkInfoList, error) {
	out := new(DetailActiveNetworkInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetActiveNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) GetPublicNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicNetworkInfo, error) {
	out := new(PublicNetworkInfo)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetPublicNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetResolverServer is the server API for NetResolver service.
// All implementations must embed UnimplementedNetResolverServer
// for forward compatibility
type NetResolverServer interface {
	GetNetworkInfo(context.Context, *Empty) (*NetInterfaceInfoList, error)
	GetCurrentWifiInfo(context.Context, *Empty) (*DetailWifiInfo, error)
	ScanWifiResult(context.Context, *Empty) (*ScanWifiInfoList, error)
	CheckNetworkConnectivity(context.Context, *Empty) (*Boolean, error)
	GetActiveNetworkInfo(context.Context, *Empty) (*DetailActiveNetworkInfoList, error)
	GetPublicNetworkInfo(context.Context, *Empty) (*PublicNetworkInfo, error)
	mustEmbedUnimplementedNetResolverServer()
}

// UnimplementedNetResolverServer must be embedded to have forward compatible implementations.
type UnimplementedNetResolverServer struct {
}

func (UnimplementedNetResolverServer) GetNetworkInfo(context.Context, *Empty) (*NetInterfaceInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInfo not implemented")
}
func (UnimplementedNetResolverServer) GetCurrentWifiInfo(context.Context, *Empty) (*DetailWifiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWifiInfo not implemented")
}
func (UnimplementedNetResolverServer) ScanWifiResult(context.Context, *Empty) (*ScanWifiInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanWifiResult not implemented")
}
func (UnimplementedNetResolverServer) CheckNetworkConnectivity(context.Context, *Empty) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNetworkConnectivity not implemented")
}
func (UnimplementedNetResolverServer) GetActiveNetworkInfo(context.Context, *Empty) (*DetailActiveNetworkInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveNetworkInfo not implemented")
}
func (UnimplementedNetResolverServer) GetPublicNetworkInfo(context.Context, *Empty) (*PublicNetworkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicNetworkInfo not implemented")
}
func (UnimplementedNetResolverServer) mustEmbedUnimplementedNetResolverServer() {}

// UnsafeNetResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetResolverServer will
// result in compilation errors.
type UnsafeNetResolverServer interface {
	mustEmbedUnimplementedNetResolverServer()
}

func RegisterNetResolverServer(s grpc.ServiceRegistrar, srv NetResolverServer) {
	s.RegisterService(&NetResolver_ServiceDesc, srv)
}

func _NetResolver_GetNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetNetworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_GetCurrentWifiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetCurrentWifiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetCurrentWifiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetCurrentWifiInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_ScanWifiResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).ScanWifiResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/ScanWifiResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).ScanWifiResult(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_CheckNetworkConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).CheckNetworkConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/CheckNetworkConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).CheckNetworkConnectivity(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_GetActiveNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetActiveNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetActiveNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetActiveNetworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_GetPublicNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetPublicNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetPublicNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetPublicNetworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NetResolver_ServiceDesc is the grpc.ServiceDesc for NetResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.NetResolver",
	HandlerType: (*NetResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkInfo",
			Handler:    _NetResolver_GetNetworkInfo_Handler,
		},
		{
			MethodName: "GetCurrentWifiInfo",
			Handler:    _NetResolver_GetCurrentWifiInfo_Handler,
		},
		{
			MethodName: "ScanWifiResult",
			Handler:    _NetResolver_ScanWifiResult_Handler,
		},
		{
			MethodName: "CheckNetworkConnectivity",
			Handler:    _NetResolver_CheckNetworkConnectivity_Handler,
		},
		{
			MethodName: "GetActiveNetworkInfo",
			Handler:    _NetResolver_GetActiveNetworkInfo_Handler,
		},
		{
			MethodName: "GetPublicNetworkInfo",
			Handler:    _NetResolver_GetPublicNetworkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/NetResolver.proto",
}
