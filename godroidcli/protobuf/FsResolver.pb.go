// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/FsResolver.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_FsResolver_proto protoreflect.FileDescriptor

var file_proto_FsResolver_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x46, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x83, 0x06, 0x0a, 0x0a, 0x46, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3c, 0x0a, 0x13, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x32,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x4d, 0x6b, 0x44, 0x69, 0x72, 0x12,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x52, 0x6d, 0x44, 0x69, 0x72, 0x12, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x69, 0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x6f,
	0x70, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x40, 0x0a,
	0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x6f, 0x78, 0x72, 0x61, 0x79, 0x73, 0x2e, 0x67, 0x6f, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x73, 0x76, 0x72, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x42, 0x0f, 0x46, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x01, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_FsResolver_proto_goTypes = []interface{}{
	(*StringTuple)(nil),  // 0: protobuf.StringTuple
	(*ParamBytes)(nil),   // 1: protobuf.ParamBytes
	(*String)(nil),       // 2: protobuf.String
	(*StringPair)(nil),   // 3: protobuf.StringPair
	(*Status)(nil),       // 4: protobuf.Status
	(*Bytes)(nil),        // 5: protobuf.Bytes
	(*FileInfoList)(nil), // 6: protobuf.FileInfoList
}
var file_proto_FsResolver_proto_depIdxs = []int32{
	0,  // 0: protobuf.FsResolver.GetBaseFileTree:input_type -> protobuf.StringTuple
	1,  // 1: protobuf.FsResolver.UploadGeneralFile:input_type -> protobuf.ParamBytes
	2,  // 2: protobuf.FsResolver.DownloadGeneralFile:input_type -> protobuf.String
	3,  // 3: protobuf.FsResolver.ListDir:input_type -> protobuf.StringPair
	2,  // 4: protobuf.FsResolver.DeleteFile:input_type -> protobuf.String
	2,  // 5: protobuf.FsResolver.CreateFile:input_type -> protobuf.String
	2,  // 6: protobuf.FsResolver.MkDir:input_type -> protobuf.String
	2,  // 7: protobuf.FsResolver.RmDir:input_type -> protobuf.String
	3,  // 8: protobuf.FsResolver.Move:input_type -> protobuf.StringPair
	3,  // 9: protobuf.FsResolver.Rename:input_type -> protobuf.StringPair
	3,  // 10: protobuf.FsResolver.Copy:input_type -> protobuf.StringPair
	2,  // 11: protobuf.FsResolver.ReadText:input_type -> protobuf.String
	3,  // 12: protobuf.FsResolver.WriteText:input_type -> protobuf.StringPair
	3,  // 13: protobuf.FsResolver.AppendText:input_type -> protobuf.StringPair
	2,  // 14: protobuf.FsResolver.GetBaseFileTree:output_type -> protobuf.String
	4,  // 15: protobuf.FsResolver.UploadGeneralFile:output_type -> protobuf.Status
	5,  // 16: protobuf.FsResolver.DownloadGeneralFile:output_type -> protobuf.Bytes
	6,  // 17: protobuf.FsResolver.ListDir:output_type -> protobuf.FileInfoList
	4,  // 18: protobuf.FsResolver.DeleteFile:output_type -> protobuf.Status
	4,  // 19: protobuf.FsResolver.CreateFile:output_type -> protobuf.Status
	4,  // 20: protobuf.FsResolver.MkDir:output_type -> protobuf.Status
	4,  // 21: protobuf.FsResolver.RmDir:output_type -> protobuf.Status
	4,  // 22: protobuf.FsResolver.Move:output_type -> protobuf.Status
	4,  // 23: protobuf.FsResolver.Rename:output_type -> protobuf.Status
	4,  // 24: protobuf.FsResolver.Copy:output_type -> protobuf.Status
	4,  // 25: protobuf.FsResolver.ReadText:output_type -> protobuf.Status
	4,  // 26: protobuf.FsResolver.WriteText:output_type -> protobuf.Status
	4,  // 27: protobuf.FsResolver.AppendText:output_type -> protobuf.Status
	14, // [14:28] is the sub-list for method output_type
	0,  // [0:14] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_FsResolver_proto_init() }
func file_proto_FsResolver_proto_init() {
	if File_proto_FsResolver_proto != nil {
		return
	}
	file_proto_Message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_FsResolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_FsResolver_proto_goTypes,
		DependencyIndexes: file_proto_FsResolver_proto_depIdxs,
	}.Build()
	File_proto_FsResolver_proto = out.File
	file_proto_FsResolver_proto_rawDesc = nil
	file_proto_FsResolver_proto_goTypes = nil
	file_proto_FsResolver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FsResolverClient is the client API for FsResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FsResolverClient interface {
	GetBaseFileTree(ctx context.Context, in *StringTuple, opts ...grpc.CallOption) (*String, error)
	UploadGeneralFile(ctx context.Context, opts ...grpc.CallOption) (FsResolver_UploadGeneralFileClient, error)
	DownloadGeneralFile(ctx context.Context, in *String, opts ...grpc.CallOption) (FsResolver_DownloadGeneralFileClient, error)
	ListDir(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*FileInfoList, error)
	DeleteFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	CreateFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	MkDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	RmDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	Move(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	Rename(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	Copy(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	ReadText(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	WriteText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	AppendText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
}

type fsResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewFsResolverClient(cc grpc.ClientConnInterface) FsResolverClient {
	return &fsResolverClient{cc}
}

func (c *fsResolverClient) GetBaseFileTree(ctx context.Context, in *StringTuple, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/GetBaseFileTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) UploadGeneralFile(ctx context.Context, opts ...grpc.CallOption) (FsResolver_UploadGeneralFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FsResolver_serviceDesc.Streams[0], "/protobuf.FsResolver/UploadGeneralFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsResolverUploadGeneralFileClient{stream}
	return x, nil
}

type FsResolver_UploadGeneralFileClient interface {
	Send(*ParamBytes) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type fsResolverUploadGeneralFileClient struct {
	grpc.ClientStream
}

func (x *fsResolverUploadGeneralFileClient) Send(m *ParamBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fsResolverUploadGeneralFileClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsResolverClient) DownloadGeneralFile(ctx context.Context, in *String, opts ...grpc.CallOption) (FsResolver_DownloadGeneralFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FsResolver_serviceDesc.Streams[1], "/protobuf.FsResolver/DownloadGeneralFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsResolverDownloadGeneralFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FsResolver_DownloadGeneralFileClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type fsResolverDownloadGeneralFileClient struct {
	grpc.ClientStream
}

func (x *fsResolverDownloadGeneralFileClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsResolverClient) ListDir(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*FileInfoList, error) {
	out := new(FileInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/ListDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) DeleteFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) CreateFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) MkDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/MkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) RmDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/RmDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) Move(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) Rename(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) Copy(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) ReadText(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/ReadText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) WriteText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/WriteText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) AppendText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/AppendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsResolverServer is the server API for FsResolver service.
type FsResolverServer interface {
	GetBaseFileTree(context.Context, *StringTuple) (*String, error)
	UploadGeneralFile(FsResolver_UploadGeneralFileServer) error
	DownloadGeneralFile(*String, FsResolver_DownloadGeneralFileServer) error
	ListDir(context.Context, *StringPair) (*FileInfoList, error)
	DeleteFile(context.Context, *String) (*Status, error)
	CreateFile(context.Context, *String) (*Status, error)
	MkDir(context.Context, *String) (*Status, error)
	RmDir(context.Context, *String) (*Status, error)
	Move(context.Context, *StringPair) (*Status, error)
	Rename(context.Context, *StringPair) (*Status, error)
	Copy(context.Context, *StringPair) (*Status, error)
	ReadText(context.Context, *String) (*Status, error)
	WriteText(context.Context, *StringPair) (*Status, error)
	AppendText(context.Context, *StringPair) (*Status, error)
}

// UnimplementedFsResolverServer can be embedded to have forward compatible implementations.
type UnimplementedFsResolverServer struct {
}

func (*UnimplementedFsResolverServer) GetBaseFileTree(context.Context, *StringTuple) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseFileTree not implemented")
}
func (*UnimplementedFsResolverServer) UploadGeneralFile(FsResolver_UploadGeneralFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadGeneralFile not implemented")
}
func (*UnimplementedFsResolverServer) DownloadGeneralFile(*String, FsResolver_DownloadGeneralFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadGeneralFile not implemented")
}
func (*UnimplementedFsResolverServer) ListDir(context.Context, *StringPair) (*FileInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (*UnimplementedFsResolverServer) DeleteFile(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (*UnimplementedFsResolverServer) CreateFile(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (*UnimplementedFsResolverServer) MkDir(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (*UnimplementedFsResolverServer) RmDir(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmDir not implemented")
}
func (*UnimplementedFsResolverServer) Move(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (*UnimplementedFsResolverServer) Rename(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (*UnimplementedFsResolverServer) Copy(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (*UnimplementedFsResolverServer) ReadText(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadText not implemented")
}
func (*UnimplementedFsResolverServer) WriteText(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteText not implemented")
}
func (*UnimplementedFsResolverServer) AppendText(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendText not implemented")
}

func RegisterFsResolverServer(s *grpc.Server, srv FsResolverServer) {
	s.RegisterService(&_FsResolver_serviceDesc, srv)
}

func _FsResolver_GetBaseFileTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTuple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).GetBaseFileTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/GetBaseFileTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).GetBaseFileTree(ctx, req.(*StringTuple))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_UploadGeneralFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FsResolverServer).UploadGeneralFile(&fsResolverUploadGeneralFileServer{stream})
}

type FsResolver_UploadGeneralFileServer interface {
	SendAndClose(*Status) error
	Recv() (*ParamBytes, error)
	grpc.ServerStream
}

type fsResolverUploadGeneralFileServer struct {
	grpc.ServerStream
}

func (x *fsResolverUploadGeneralFileServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fsResolverUploadGeneralFileServer) Recv() (*ParamBytes, error) {
	m := new(ParamBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FsResolver_DownloadGeneralFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FsResolverServer).DownloadGeneralFile(m, &fsResolverDownloadGeneralFileServer{stream})
}

type FsResolver_DownloadGeneralFileServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type fsResolverDownloadGeneralFileServer struct {
	grpc.ServerStream
}

func (x *fsResolverDownloadGeneralFileServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _FsResolver_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).ListDir(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).DeleteFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).CreateFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/MkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).MkDir(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_RmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).RmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/RmDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).RmDir(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).Move(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).Rename(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).Copy(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_ReadText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).ReadText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/ReadText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).ReadText(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_WriteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).WriteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/WriteText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).WriteText(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_AppendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).AppendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/AppendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).AppendText(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

var _FsResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FsResolver",
	HandlerType: (*FsResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBaseFileTree",
			Handler:    _FsResolver_GetBaseFileTree_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _FsResolver_ListDir_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FsResolver_DeleteFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FsResolver_CreateFile_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _FsResolver_MkDir_Handler,
		},
		{
			MethodName: "RmDir",
			Handler:    _FsResolver_RmDir_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FsResolver_Move_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FsResolver_Rename_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FsResolver_Copy_Handler,
		},
		{
			MethodName: "ReadText",
			Handler:    _FsResolver_ReadText_Handler,
		},
		{
			MethodName: "WriteText",
			Handler:    _FsResolver_WriteText_Handler,
		},
		{
			MethodName: "AppendText",
			Handler:    _FsResolver_AppendText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadGeneralFile",
			Handler:       _FsResolver_UploadGeneralFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadGeneralFile",
			Handler:       _FsResolver_DownloadGeneralFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/FsResolver.proto",
}
