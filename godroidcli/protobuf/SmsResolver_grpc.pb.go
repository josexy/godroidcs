// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SmsResolverClient is the client API for SmsResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsResolverClient interface {
	GetAllBasicSmsInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringList, error)
	GetSmsInfoList(ctx context.Context, in *String, opts ...grpc.CallOption) (*SmsInfoList, error)
	SendSms(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Empty, error)
}

type smsResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsResolverClient(cc grpc.ClientConnInterface) SmsResolverClient {
	return &smsResolverClient{cc}
}

func (c *smsResolverClient) GetAllBasicSmsInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.SmsResolver/GetAllBasicSmsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsResolverClient) GetSmsInfoList(ctx context.Context, in *String, opts ...grpc.CallOption) (*SmsInfoList, error) {
	out := new(SmsInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.SmsResolver/GetSmsInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsResolverClient) SendSms(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.SmsResolver/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsResolverServer is the server API for SmsResolver service.
// All implementations must embed UnimplementedSmsResolverServer
// for forward compatibility
type SmsResolverServer interface {
	GetAllBasicSmsInfo(context.Context, *Empty) (*StringList, error)
	GetSmsInfoList(context.Context, *String) (*SmsInfoList, error)
	SendSms(context.Context, *StringPair) (*Empty, error)
	mustEmbedUnimplementedSmsResolverServer()
}

// UnimplementedSmsResolverServer must be embedded to have forward compatible implementations.
type UnimplementedSmsResolverServer struct {
}

func (UnimplementedSmsResolverServer) GetAllBasicSmsInfo(context.Context, *Empty) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBasicSmsInfo not implemented")
}
func (UnimplementedSmsResolverServer) GetSmsInfoList(context.Context, *String) (*SmsInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsInfoList not implemented")
}
func (UnimplementedSmsResolverServer) SendSms(context.Context, *StringPair) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedSmsResolverServer) mustEmbedUnimplementedSmsResolverServer() {}

// UnsafeSmsResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsResolverServer will
// result in compilation errors.
type UnsafeSmsResolverServer interface {
	mustEmbedUnimplementedSmsResolverServer()
}

func RegisterSmsResolverServer(s grpc.ServiceRegistrar, srv SmsResolverServer) {
	s.RegisterService(&SmsResolver_ServiceDesc, srv)
}

func _SmsResolver_GetAllBasicSmsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsResolverServer).GetAllBasicSmsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SmsResolver/GetAllBasicSmsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsResolverServer).GetAllBasicSmsInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsResolver_GetSmsInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsResolverServer).GetSmsInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SmsResolver/GetSmsInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsResolverServer).GetSmsInfoList(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsResolver_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsResolverServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.SmsResolver/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsResolverServer).SendSms(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsResolver_ServiceDesc is the grpc.ServiceDesc for SmsResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.SmsResolver",
	HandlerType: (*SmsResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBasicSmsInfo",
			Handler:    _SmsResolver_GetAllBasicSmsInfo_Handler,
		},
		{
			MethodName: "GetSmsInfoList",
			Handler:    _SmsResolver_GetSmsInfoList_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _SmsResolver_SendSms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/SmsResolver.proto",
}
