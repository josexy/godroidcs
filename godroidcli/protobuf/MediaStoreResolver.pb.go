// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/MediaStoreResolver.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_MediaStoreResolver_proto protoreflect.FileDescriptor

var file_proto_MediaStoreResolver_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0x92, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x48, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x6f, 0x78, 0x72,
	0x61, 0x79, 0x73, 0x2e, 0x67, 0x6f, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x73, 0x76, 0x72, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x01, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_MediaStoreResolver_proto_goTypes = []interface{}{
	(*MediaType)(nil),          // 0: protobuf.MediaType
	(*String)(nil),             // 1: protobuf.String
	(*MediaStoreInfoList)(nil), // 2: protobuf.MediaStoreInfoList
	(*Bytes)(nil),              // 3: protobuf.Bytes
	(*Empty)(nil),              // 4: protobuf.Empty
}
var file_proto_MediaStoreResolver_proto_depIdxs = []int32{
	0, // 0: protobuf.MediaStoreResolver.GetMediaFilesInfo:input_type -> protobuf.MediaType
	1, // 1: protobuf.MediaStoreResolver.GetMediaFileThumbnail:input_type -> protobuf.String
	1, // 2: protobuf.MediaStoreResolver.DeleteMediaFile:input_type -> protobuf.String
	1, // 3: protobuf.MediaStoreResolver.DownloadMediaFile:input_type -> protobuf.String
	2, // 4: protobuf.MediaStoreResolver.GetMediaFilesInfo:output_type -> protobuf.MediaStoreInfoList
	3, // 5: protobuf.MediaStoreResolver.GetMediaFileThumbnail:output_type -> protobuf.Bytes
	4, // 6: protobuf.MediaStoreResolver.DeleteMediaFile:output_type -> protobuf.Empty
	3, // 7: protobuf.MediaStoreResolver.DownloadMediaFile:output_type -> protobuf.Bytes
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_MediaStoreResolver_proto_init() }
func file_proto_MediaStoreResolver_proto_init() {
	if File_proto_MediaStoreResolver_proto != nil {
		return
	}
	file_proto_Message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_MediaStoreResolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_MediaStoreResolver_proto_goTypes,
		DependencyIndexes: file_proto_MediaStoreResolver_proto_depIdxs,
	}.Build()
	File_proto_MediaStoreResolver_proto = out.File
	file_proto_MediaStoreResolver_proto_rawDesc = nil
	file_proto_MediaStoreResolver_proto_goTypes = nil
	file_proto_MediaStoreResolver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MediaStoreResolverClient is the client API for MediaStoreResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MediaStoreResolverClient interface {
	GetMediaFilesInfo(ctx context.Context, in *MediaType, opts ...grpc.CallOption) (*MediaStoreInfoList, error)
	GetMediaFileThumbnail(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_GetMediaFileThumbnailClient, error)
	DeleteMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	DownloadMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_DownloadMediaFileClient, error)
}

type mediaStoreResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaStoreResolverClient(cc grpc.ClientConnInterface) MediaStoreResolverClient {
	return &mediaStoreResolverClient{cc}
}

func (c *mediaStoreResolverClient) GetMediaFilesInfo(ctx context.Context, in *MediaType, opts ...grpc.CallOption) (*MediaStoreInfoList, error) {
	out := new(MediaStoreInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.MediaStoreResolver/GetMediaFilesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStoreResolverClient) GetMediaFileThumbnail(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_GetMediaFileThumbnailClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MediaStoreResolver_serviceDesc.Streams[0], "/protobuf.MediaStoreResolver/GetMediaFileThumbnail", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStoreResolverGetMediaFileThumbnailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaStoreResolver_GetMediaFileThumbnailClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type mediaStoreResolverGetMediaFileThumbnailClient struct {
	grpc.ClientStream
}

func (x *mediaStoreResolverGetMediaFileThumbnailClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaStoreResolverClient) DeleteMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MediaStoreResolver/DeleteMediaFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStoreResolverClient) DownloadMediaFile(ctx context.Context, in *String, opts ...grpc.CallOption) (MediaStoreResolver_DownloadMediaFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MediaStoreResolver_serviceDesc.Streams[1], "/protobuf.MediaStoreResolver/DownloadMediaFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStoreResolverDownloadMediaFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaStoreResolver_DownloadMediaFileClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type mediaStoreResolverDownloadMediaFileClient struct {
	grpc.ClientStream
}

func (x *mediaStoreResolverDownloadMediaFileClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaStoreResolverServer is the server API for MediaStoreResolver service.
type MediaStoreResolverServer interface {
	GetMediaFilesInfo(context.Context, *MediaType) (*MediaStoreInfoList, error)
	GetMediaFileThumbnail(*String, MediaStoreResolver_GetMediaFileThumbnailServer) error
	DeleteMediaFile(context.Context, *String) (*Empty, error)
	DownloadMediaFile(*String, MediaStoreResolver_DownloadMediaFileServer) error
}

// UnimplementedMediaStoreResolverServer can be embedded to have forward compatible implementations.
type UnimplementedMediaStoreResolverServer struct {
}

func (*UnimplementedMediaStoreResolverServer) GetMediaFilesInfo(context.Context, *MediaType) (*MediaStoreInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaFilesInfo not implemented")
}
func (*UnimplementedMediaStoreResolverServer) GetMediaFileThumbnail(*String, MediaStoreResolver_GetMediaFileThumbnailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMediaFileThumbnail not implemented")
}
func (*UnimplementedMediaStoreResolverServer) DeleteMediaFile(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaFile not implemented")
}
func (*UnimplementedMediaStoreResolverServer) DownloadMediaFile(*String, MediaStoreResolver_DownloadMediaFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadMediaFile not implemented")
}

func RegisterMediaStoreResolverServer(s *grpc.Server, srv MediaStoreResolverServer) {
	s.RegisterService(&_MediaStoreResolver_serviceDesc, srv)
}

func _MediaStoreResolver_GetMediaFilesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStoreResolverServer).GetMediaFilesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MediaStoreResolver/GetMediaFilesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStoreResolverServer).GetMediaFilesInfo(ctx, req.(*MediaType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStoreResolver_GetMediaFileThumbnail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaStoreResolverServer).GetMediaFileThumbnail(m, &mediaStoreResolverGetMediaFileThumbnailServer{stream})
}

type MediaStoreResolver_GetMediaFileThumbnailServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type mediaStoreResolverGetMediaFileThumbnailServer struct {
	grpc.ServerStream
}

func (x *mediaStoreResolverGetMediaFileThumbnailServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _MediaStoreResolver_DeleteMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStoreResolverServer).DeleteMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MediaStoreResolver/DeleteMediaFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStoreResolverServer).DeleteMediaFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStoreResolver_DownloadMediaFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaStoreResolverServer).DownloadMediaFile(m, &mediaStoreResolverDownloadMediaFileServer{stream})
}

type MediaStoreResolver_DownloadMediaFileServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type mediaStoreResolverDownloadMediaFileServer struct {
	grpc.ServerStream
}

func (x *mediaStoreResolverDownloadMediaFileServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

var _MediaStoreResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MediaStoreResolver",
	HandlerType: (*MediaStoreResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMediaFilesInfo",
			Handler:    _MediaStoreResolver_GetMediaFilesInfo_Handler,
		},
		{
			MethodName: "DeleteMediaFile",
			Handler:    _MediaStoreResolver_DeleteMediaFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMediaFileThumbnail",
			Handler:       _MediaStoreResolver_GetMediaFileThumbnail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadMediaFile",
			Handler:       _MediaStoreResolver_DownloadMediaFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/MediaStoreResolver.proto",
}
