// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PmResolverClient is the client API for PmResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PmResolverClient interface {
	GetAllPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error)
	GetAllUserPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error)
	GetAllSystemPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error)
	GetApplicationInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*ApplicationInfo, error)
	GetPackageInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*PackageInfo, error)
	GetApplicationSize(ctx context.Context, in *String, opts ...grpc.CallOption) (*AppSize, error)
	UninstallApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	InstallApk(ctx context.Context, opts ...grpc.CallOption) (PmResolver_InstallApkClient, error)
	GetApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetIcon(ctx context.Context, in *String, opts ...grpc.CallOption) (PmResolver_GetIconClient, error)
	GetPermissions(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetActivities(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetServices(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetReceivers(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetSharedLibFiles(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
	GetProviders(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error)
}

type pmResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewPmResolverClient(cc grpc.ClientConnInterface) PmResolverClient {
	return &pmResolverClient{cc}
}

func (c *pmResolverClient) GetAllPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error) {
	out := new(PackageMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetAllPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetAllUserPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error) {
	out := new(PackageMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetAllUserPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetAllSystemPackageInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageMetaInfoList, error) {
	out := new(PackageMetaInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetAllSystemPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetApplicationInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*ApplicationInfo, error) {
	out := new(ApplicationInfo)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetApplicationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetPackageInfo(ctx context.Context, in *String, opts ...grpc.CallOption) (*PackageInfo, error) {
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetApplicationSize(ctx context.Context, in *String, opts ...grpc.CallOption) (*AppSize, error) {
	out := new(AppSize)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetApplicationSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) UninstallApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/UninstallApk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) InstallApk(ctx context.Context, opts ...grpc.CallOption) (PmResolver_InstallApkClient, error) {
	stream, err := c.cc.NewStream(ctx, &PmResolver_ServiceDesc.Streams[0], "/protobuf.PmResolver/InstallApk", opts...)
	if err != nil {
		return nil, err
	}
	x := &pmResolverInstallApkClient{stream}
	return x, nil
}

type PmResolver_InstallApkClient interface {
	Send(*ParamBytes) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type pmResolverInstallApkClient struct {
	grpc.ClientStream
}

func (x *pmResolverInstallApkClient) Send(m *ParamBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pmResolverInstallApkClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pmResolverClient) GetApk(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetApk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetIcon(ctx context.Context, in *String, opts ...grpc.CallOption) (PmResolver_GetIconClient, error) {
	stream, err := c.cc.NewStream(ctx, &PmResolver_ServiceDesc.Streams[1], "/protobuf.PmResolver/GetIcon", opts...)
	if err != nil {
		return nil, err
	}
	x := &pmResolverGetIconClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PmResolver_GetIconClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type pmResolverGetIconClient struct {
	grpc.ClientStream
}

func (x *pmResolverGetIconClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pmResolverClient) GetPermissions(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetActivities(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetServices(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetReceivers(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetReceivers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetSharedLibFiles(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetSharedLibFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmResolverClient) GetProviders(ctx context.Context, in *String, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/protobuf.PmResolver/GetProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmResolverServer is the server API for PmResolver service.
// All implementations must embed UnimplementedPmResolverServer
// for forward compatibility
type PmResolverServer interface {
	GetAllPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error)
	GetAllUserPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error)
	GetAllSystemPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error)
	GetApplicationInfo(context.Context, *String) (*ApplicationInfo, error)
	GetPackageInfo(context.Context, *String) (*PackageInfo, error)
	GetApplicationSize(context.Context, *String) (*AppSize, error)
	UninstallApk(context.Context, *String) (*Empty, error)
	InstallApk(PmResolver_InstallApkServer) error
	GetApk(context.Context, *String) (*String, error)
	GetIcon(*String, PmResolver_GetIconServer) error
	GetPermissions(context.Context, *String) (*StringList, error)
	GetActivities(context.Context, *String) (*StringList, error)
	GetServices(context.Context, *String) (*StringList, error)
	GetReceivers(context.Context, *String) (*StringList, error)
	GetSharedLibFiles(context.Context, *String) (*StringList, error)
	GetProviders(context.Context, *String) (*StringList, error)
	mustEmbedUnimplementedPmResolverServer()
}

// UnimplementedPmResolverServer must be embedded to have forward compatible implementations.
type UnimplementedPmResolverServer struct {
}

func (UnimplementedPmResolverServer) GetAllPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPackageInfo not implemented")
}
func (UnimplementedPmResolverServer) GetAllUserPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserPackageInfo not implemented")
}
func (UnimplementedPmResolverServer) GetAllSystemPackageInfo(context.Context, *Empty) (*PackageMetaInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSystemPackageInfo not implemented")
}
func (UnimplementedPmResolverServer) GetApplicationInfo(context.Context, *String) (*ApplicationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationInfo not implemented")
}
func (UnimplementedPmResolverServer) GetPackageInfo(context.Context, *String) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageInfo not implemented")
}
func (UnimplementedPmResolverServer) GetApplicationSize(context.Context, *String) (*AppSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationSize not implemented")
}
func (UnimplementedPmResolverServer) UninstallApk(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallApk not implemented")
}
func (UnimplementedPmResolverServer) InstallApk(PmResolver_InstallApkServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallApk not implemented")
}
func (UnimplementedPmResolverServer) GetApk(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApk not implemented")
}
func (UnimplementedPmResolverServer) GetIcon(*String, PmResolver_GetIconServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIcon not implemented")
}
func (UnimplementedPmResolverServer) GetPermissions(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedPmResolverServer) GetActivities(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (UnimplementedPmResolverServer) GetServices(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedPmResolverServer) GetReceivers(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivers not implemented")
}
func (UnimplementedPmResolverServer) GetSharedLibFiles(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedLibFiles not implemented")
}
func (UnimplementedPmResolverServer) GetProviders(context.Context, *String) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedPmResolverServer) mustEmbedUnimplementedPmResolverServer() {}

// UnsafePmResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PmResolverServer will
// result in compilation errors.
type UnsafePmResolverServer interface {
	mustEmbedUnimplementedPmResolverServer()
}

func RegisterPmResolverServer(s grpc.ServiceRegistrar, srv PmResolverServer) {
	s.RegisterService(&PmResolver_ServiceDesc, srv)
}

func _PmResolver_GetAllPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetAllPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetAllPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetAllPackageInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetAllUserPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetAllUserPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetAllUserPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetAllUserPackageInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetAllSystemPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetAllSystemPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetAllSystemPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetAllSystemPackageInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetApplicationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetApplicationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetApplicationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetApplicationInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetPackageInfo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetApplicationSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetApplicationSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetApplicationSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetApplicationSize(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_UninstallApk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).UninstallApk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/UninstallApk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).UninstallApk(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_InstallApk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PmResolverServer).InstallApk(&pmResolverInstallApkServer{stream})
}

type PmResolver_InstallApkServer interface {
	SendAndClose(*Status) error
	Recv() (*ParamBytes, error)
	grpc.ServerStream
}

type pmResolverInstallApkServer struct {
	grpc.ServerStream
}

func (x *pmResolverInstallApkServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pmResolverInstallApkServer) Recv() (*ParamBytes, error) {
	m := new(ParamBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PmResolver_GetApk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetApk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetApk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetApk(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetIcon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PmResolverServer).GetIcon(m, &pmResolverGetIconServer{stream})
}

type PmResolver_GetIconServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type pmResolverGetIconServer struct {
	grpc.ServerStream
}

func (x *pmResolverGetIconServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _PmResolver_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetPermissions(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetActivities(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetServices(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetReceivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetReceivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetReceivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetReceivers(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetSharedLibFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetSharedLibFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetSharedLibFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetSharedLibFiles(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PmResolver_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmResolverServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PmResolver/GetProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmResolverServer).GetProviders(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

// PmResolver_ServiceDesc is the grpc.ServiceDesc for PmResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PmResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PmResolver",
	HandlerType: (*PmResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPackageInfo",
			Handler:    _PmResolver_GetAllPackageInfo_Handler,
		},
		{
			MethodName: "GetAllUserPackageInfo",
			Handler:    _PmResolver_GetAllUserPackageInfo_Handler,
		},
		{
			MethodName: "GetAllSystemPackageInfo",
			Handler:    _PmResolver_GetAllSystemPackageInfo_Handler,
		},
		{
			MethodName: "GetApplicationInfo",
			Handler:    _PmResolver_GetApplicationInfo_Handler,
		},
		{
			MethodName: "GetPackageInfo",
			Handler:    _PmResolver_GetPackageInfo_Handler,
		},
		{
			MethodName: "GetApplicationSize",
			Handler:    _PmResolver_GetApplicationSize_Handler,
		},
		{
			MethodName: "UninstallApk",
			Handler:    _PmResolver_UninstallApk_Handler,
		},
		{
			MethodName: "GetApk",
			Handler:    _PmResolver_GetApk_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _PmResolver_GetPermissions_Handler,
		},
		{
			MethodName: "GetActivities",
			Handler:    _PmResolver_GetActivities_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _PmResolver_GetServices_Handler,
		},
		{
			MethodName: "GetReceivers",
			Handler:    _PmResolver_GetReceivers_Handler,
		},
		{
			MethodName: "GetSharedLibFiles",
			Handler:    _PmResolver_GetSharedLibFiles_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _PmResolver_GetProviders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallApk",
			Handler:       _PmResolver_InstallApk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetIcon",
			Handler:       _PmResolver_GetIcon_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/PmResolver.proto",
}
