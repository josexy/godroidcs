// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/DeviceResolver.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_DeviceResolver_proto protoreflect.FileDescriptor

var file_proto_DeviceResolver_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xac, 0x04, 0x0a, 0x0e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x50, 0x55, 0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x47, 0x50, 0x55,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x44, 0x0a, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x6a, 0x6f, 0x78, 0x72, 0x61, 0x79, 0x73, 0x2e, 0x67, 0x6f, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x73, 0x76, 0x72, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x13, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x01, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_DeviceResolver_proto_goTypes = []interface{}{
	(*Empty)(nil),            // 0: protobuf.Empty
	(*DeviceInfo)(nil),       // 1: protobuf.DeviceInfo
	(*MemoryInfo)(nil),       // 2: protobuf.MemoryInfo
	(*StorageSpaceInfo)(nil), // 3: protobuf.StorageSpaceInfo
	(*SystemInfo)(nil),       // 4: protobuf.SystemInfo
	(*DisplayInfo)(nil),      // 5: protobuf.DisplayInfo
	(*LocationInfo)(nil),     // 6: protobuf.LocationInfo
	(*BatteryInfo)(nil),      // 7: protobuf.BatteryInfo
	(*IntegerList)(nil),      // 8: protobuf.IntegerList
	(*GPUInfo)(nil),          // 9: protobuf.GPUInfo
}
var file_proto_DeviceResolver_proto_depIdxs = []int32{
	0, // 0: protobuf.DeviceResolver.GetDeviceInfo:input_type -> protobuf.Empty
	0, // 1: protobuf.DeviceResolver.GetMemoryInfo:input_type -> protobuf.Empty
	0, // 2: protobuf.DeviceResolver.GetStorageSpaceInfo:input_type -> protobuf.Empty
	0, // 3: protobuf.DeviceResolver.GetSystemInfo:input_type -> protobuf.Empty
	0, // 4: protobuf.DeviceResolver.GetDisplayInfo:input_type -> protobuf.Empty
	0, // 5: protobuf.DeviceResolver.GetLocationInfo:input_type -> protobuf.Empty
	0, // 6: protobuf.DeviceResolver.GetBatteryInfo:input_type -> protobuf.Empty
	0, // 7: protobuf.DeviceResolver.GetCPUsFrequency:input_type -> protobuf.Empty
	0, // 8: protobuf.DeviceResolver.GetGPUInfo:input_type -> protobuf.Empty
	1, // 9: protobuf.DeviceResolver.GetDeviceInfo:output_type -> protobuf.DeviceInfo
	2, // 10: protobuf.DeviceResolver.GetMemoryInfo:output_type -> protobuf.MemoryInfo
	3, // 11: protobuf.DeviceResolver.GetStorageSpaceInfo:output_type -> protobuf.StorageSpaceInfo
	4, // 12: protobuf.DeviceResolver.GetSystemInfo:output_type -> protobuf.SystemInfo
	5, // 13: protobuf.DeviceResolver.GetDisplayInfo:output_type -> protobuf.DisplayInfo
	6, // 14: protobuf.DeviceResolver.GetLocationInfo:output_type -> protobuf.LocationInfo
	7, // 15: protobuf.DeviceResolver.GetBatteryInfo:output_type -> protobuf.BatteryInfo
	8, // 16: protobuf.DeviceResolver.GetCPUsFrequency:output_type -> protobuf.IntegerList
	9, // 17: protobuf.DeviceResolver.GetGPUInfo:output_type -> protobuf.GPUInfo
	9, // [9:18] is the sub-list for method output_type
	0, // [0:9] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_DeviceResolver_proto_init() }
func file_proto_DeviceResolver_proto_init() {
	if File_proto_DeviceResolver_proto != nil {
		return
	}
	file_proto_Message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_DeviceResolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_DeviceResolver_proto_goTypes,
		DependencyIndexes: file_proto_DeviceResolver_proto_depIdxs,
	}.Build()
	File_proto_DeviceResolver_proto = out.File
	file_proto_DeviceResolver_proto_rawDesc = nil
	file_proto_DeviceResolver_proto_goTypes = nil
	file_proto_DeviceResolver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceResolverClient is the client API for DeviceResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceResolverClient interface {
	GetDeviceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceInfo, error)
	GetMemoryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemoryInfo, error)
	GetStorageSpaceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StorageSpaceInfo, error)
	GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemInfo, error)
	GetDisplayInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DisplayInfo, error)
	GetLocationInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LocationInfo, error)
	GetBatteryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BatteryInfo, error)
	GetCPUsFrequency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntegerList, error)
	GetGPUInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GPUInfo, error)
}

type deviceResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceResolverClient(cc grpc.ClientConnInterface) DeviceResolverClient {
	return &deviceResolverClient{cc}
}

func (c *deviceResolverClient) GetDeviceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetMemoryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemoryInfo, error) {
	out := new(MemoryInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetMemoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetStorageSpaceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StorageSpaceInfo, error) {
	out := new(StorageSpaceInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetStorageSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemInfo, error) {
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetDisplayInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DisplayInfo, error) {
	out := new(DisplayInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetDisplayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetLocationInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LocationInfo, error) {
	out := new(LocationInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetLocationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetBatteryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BatteryInfo, error) {
	out := new(BatteryInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetBatteryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetCPUsFrequency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntegerList, error) {
	out := new(IntegerList)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetCPUsFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetGPUInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GPUInfo, error) {
	out := new(GPUInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetGPUInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceResolverServer is the server API for DeviceResolver service.
type DeviceResolverServer interface {
	GetDeviceInfo(context.Context, *Empty) (*DeviceInfo, error)
	GetMemoryInfo(context.Context, *Empty) (*MemoryInfo, error)
	GetStorageSpaceInfo(context.Context, *Empty) (*StorageSpaceInfo, error)
	GetSystemInfo(context.Context, *Empty) (*SystemInfo, error)
	GetDisplayInfo(context.Context, *Empty) (*DisplayInfo, error)
	GetLocationInfo(context.Context, *Empty) (*LocationInfo, error)
	GetBatteryInfo(context.Context, *Empty) (*BatteryInfo, error)
	GetCPUsFrequency(context.Context, *Empty) (*IntegerList, error)
	GetGPUInfo(context.Context, *Empty) (*GPUInfo, error)
}

// UnimplementedDeviceResolverServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceResolverServer struct {
}

func (*UnimplementedDeviceResolverServer) GetDeviceInfo(context.Context, *Empty) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetMemoryInfo(context.Context, *Empty) (*MemoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetStorageSpaceInfo(context.Context, *Empty) (*StorageSpaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSpaceInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetSystemInfo(context.Context, *Empty) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetDisplayInfo(context.Context, *Empty) (*DisplayInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetLocationInfo(context.Context, *Empty) (*LocationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetBatteryInfo(context.Context, *Empty) (*BatteryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatteryInfo not implemented")
}
func (*UnimplementedDeviceResolverServer) GetCPUsFrequency(context.Context, *Empty) (*IntegerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPUsFrequency not implemented")
}
func (*UnimplementedDeviceResolverServer) GetGPUInfo(context.Context, *Empty) (*GPUInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGPUInfo not implemented")
}

func RegisterDeviceResolverServer(s *grpc.Server, srv DeviceResolverServer) {
	s.RegisterService(&_DeviceResolver_serviceDesc, srv)
}

func _DeviceResolver_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetDeviceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetMemoryInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetStorageSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetStorageSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetStorageSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetStorageSpaceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetSystemInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetDisplayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetDisplayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetDisplayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetDisplayInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetLocationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetLocationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetLocationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetLocationInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetBatteryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetBatteryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetBatteryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetBatteryInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetCPUsFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetCPUsFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetCPUsFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetCPUsFrequency(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetGPUInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetGPUInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetGPUInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetGPUInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.DeviceResolver",
	HandlerType: (*DeviceResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DeviceResolver_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetMemoryInfo",
			Handler:    _DeviceResolver_GetMemoryInfo_Handler,
		},
		{
			MethodName: "GetStorageSpaceInfo",
			Handler:    _DeviceResolver_GetStorageSpaceInfo_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _DeviceResolver_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetDisplayInfo",
			Handler:    _DeviceResolver_GetDisplayInfo_Handler,
		},
		{
			MethodName: "GetLocationInfo",
			Handler:    _DeviceResolver_GetLocationInfo_Handler,
		},
		{
			MethodName: "GetBatteryInfo",
			Handler:    _DeviceResolver_GetBatteryInfo_Handler,
		},
		{
			MethodName: "GetCPUsFrequency",
			Handler:    _DeviceResolver_GetCPUsFrequency_Handler,
		},
		{
			MethodName: "GetGPUInfo",
			Handler:    _DeviceResolver_GetGPUInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/DeviceResolver.proto",
}
