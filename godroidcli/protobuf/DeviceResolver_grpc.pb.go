// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceResolverClient is the client API for DeviceResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceResolverClient interface {
	GetDeviceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceInfo, error)
	GetMemoryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemoryInfo, error)
	GetStorageSpaceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StorageSpaceInfo, error)
	GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemInfo, error)
	GetDisplayInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DisplayInfo, error)
	GetLocationInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LocationInfo, error)
	GetBatteryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BatteryInfo, error)
	GetCPUsFrequency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntegerList, error)
	GetGPUInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GPUInfo, error)
}

type deviceResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceResolverClient(cc grpc.ClientConnInterface) DeviceResolverClient {
	return &deviceResolverClient{cc}
}

func (c *deviceResolverClient) GetDeviceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetMemoryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemoryInfo, error) {
	out := new(MemoryInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetMemoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetStorageSpaceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StorageSpaceInfo, error) {
	out := new(StorageSpaceInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetStorageSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemInfo, error) {
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetDisplayInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DisplayInfo, error) {
	out := new(DisplayInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetDisplayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetLocationInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LocationInfo, error) {
	out := new(LocationInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetLocationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetBatteryInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BatteryInfo, error) {
	out := new(BatteryInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetBatteryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetCPUsFrequency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntegerList, error) {
	out := new(IntegerList)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetCPUsFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceResolverClient) GetGPUInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GPUInfo, error) {
	out := new(GPUInfo)
	err := c.cc.Invoke(ctx, "/protobuf.DeviceResolver/GetGPUInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceResolverServer is the server API for DeviceResolver service.
// All implementations must embed UnimplementedDeviceResolverServer
// for forward compatibility
type DeviceResolverServer interface {
	GetDeviceInfo(context.Context, *Empty) (*DeviceInfo, error)
	GetMemoryInfo(context.Context, *Empty) (*MemoryInfo, error)
	GetStorageSpaceInfo(context.Context, *Empty) (*StorageSpaceInfo, error)
	GetSystemInfo(context.Context, *Empty) (*SystemInfo, error)
	GetDisplayInfo(context.Context, *Empty) (*DisplayInfo, error)
	GetLocationInfo(context.Context, *Empty) (*LocationInfo, error)
	GetBatteryInfo(context.Context, *Empty) (*BatteryInfo, error)
	GetCPUsFrequency(context.Context, *Empty) (*IntegerList, error)
	GetGPUInfo(context.Context, *Empty) (*GPUInfo, error)
	mustEmbedUnimplementedDeviceResolverServer()
}

// UnimplementedDeviceResolverServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceResolverServer struct {
}

func (UnimplementedDeviceResolverServer) GetDeviceInfo(context.Context, *Empty) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetMemoryInfo(context.Context, *Empty) (*MemoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetStorageSpaceInfo(context.Context, *Empty) (*StorageSpaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSpaceInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetSystemInfo(context.Context, *Empty) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetDisplayInfo(context.Context, *Empty) (*DisplayInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetLocationInfo(context.Context, *Empty) (*LocationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetBatteryInfo(context.Context, *Empty) (*BatteryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatteryInfo not implemented")
}
func (UnimplementedDeviceResolverServer) GetCPUsFrequency(context.Context, *Empty) (*IntegerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPUsFrequency not implemented")
}
func (UnimplementedDeviceResolverServer) GetGPUInfo(context.Context, *Empty) (*GPUInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGPUInfo not implemented")
}
func (UnimplementedDeviceResolverServer) mustEmbedUnimplementedDeviceResolverServer() {}

// UnsafeDeviceResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceResolverServer will
// result in compilation errors.
type UnsafeDeviceResolverServer interface {
	mustEmbedUnimplementedDeviceResolverServer()
}

func RegisterDeviceResolverServer(s grpc.ServiceRegistrar, srv DeviceResolverServer) {
	s.RegisterService(&DeviceResolver_ServiceDesc, srv)
}

func _DeviceResolver_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetDeviceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetMemoryInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetStorageSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetStorageSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetStorageSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetStorageSpaceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetSystemInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetDisplayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetDisplayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetDisplayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetDisplayInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetLocationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetLocationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetLocationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetLocationInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetBatteryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetBatteryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetBatteryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetBatteryInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetCPUsFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetCPUsFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetCPUsFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetCPUsFrequency(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceResolver_GetGPUInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceResolverServer).GetGPUInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeviceResolver/GetGPUInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceResolverServer).GetGPUInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceResolver_ServiceDesc is the grpc.ServiceDesc for DeviceResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.DeviceResolver",
	HandlerType: (*DeviceResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DeviceResolver_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetMemoryInfo",
			Handler:    _DeviceResolver_GetMemoryInfo_Handler,
		},
		{
			MethodName: "GetStorageSpaceInfo",
			Handler:    _DeviceResolver_GetStorageSpaceInfo_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _DeviceResolver_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetDisplayInfo",
			Handler:    _DeviceResolver_GetDisplayInfo_Handler,
		},
		{
			MethodName: "GetLocationInfo",
			Handler:    _DeviceResolver_GetLocationInfo_Handler,
		},
		{
			MethodName: "GetBatteryInfo",
			Handler:    _DeviceResolver_GetBatteryInfo_Handler,
		},
		{
			MethodName: "GetCPUsFrequency",
			Handler:    _DeviceResolver_GetCPUsFrequency_Handler,
		},
		{
			MethodName: "GetGPUInfo",
			Handler:    _DeviceResolver_GetGPUInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/DeviceResolver.proto",
}
