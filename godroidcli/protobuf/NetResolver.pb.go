// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/NetResolver.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_NetResolver_proto protoreflect.FileDescriptor

var file_proto_NetResolver_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb2, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x66, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x66, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x57, 0x69, 0x66, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x41, 0x0a,
	0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x6f, 0x78, 0x72, 0x61, 0x79, 0x73, 0x2e, 0x67, 0x6f, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x73, 0x76, 0x72, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x42, 0x10, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x01, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_NetResolver_proto_goTypes = []interface{}{
	(*Empty)(nil),                       // 0: protobuf.Empty
	(*NetInterfaceInfoList)(nil),        // 1: protobuf.NetInterfaceInfoList
	(*DetailWifiInfo)(nil),              // 2: protobuf.DetailWifiInfo
	(*ScanWifiInfoList)(nil),            // 3: protobuf.ScanWifiInfoList
	(*Boolean)(nil),                     // 4: protobuf.Boolean
	(*DetailActiveNetworkInfoList)(nil), // 5: protobuf.DetailActiveNetworkInfoList
	(*PublicNetworkInfo)(nil),           // 6: protobuf.PublicNetworkInfo
}
var file_proto_NetResolver_proto_depIdxs = []int32{
	0, // 0: protobuf.NetResolver.GetNetworkInfo:input_type -> protobuf.Empty
	0, // 1: protobuf.NetResolver.GetCurrentWifiInfo:input_type -> protobuf.Empty
	0, // 2: protobuf.NetResolver.ScanWifiResult:input_type -> protobuf.Empty
	0, // 3: protobuf.NetResolver.CheckNetworkConnectivity:input_type -> protobuf.Empty
	0, // 4: protobuf.NetResolver.GetActiveNetworkInfo:input_type -> protobuf.Empty
	0, // 5: protobuf.NetResolver.GetPublicNetworkInfo:input_type -> protobuf.Empty
	1, // 6: protobuf.NetResolver.GetNetworkInfo:output_type -> protobuf.NetInterfaceInfoList
	2, // 7: protobuf.NetResolver.GetCurrentWifiInfo:output_type -> protobuf.DetailWifiInfo
	3, // 8: protobuf.NetResolver.ScanWifiResult:output_type -> protobuf.ScanWifiInfoList
	4, // 9: protobuf.NetResolver.CheckNetworkConnectivity:output_type -> protobuf.Boolean
	5, // 10: protobuf.NetResolver.GetActiveNetworkInfo:output_type -> protobuf.DetailActiveNetworkInfoList
	6, // 11: protobuf.NetResolver.GetPublicNetworkInfo:output_type -> protobuf.PublicNetworkInfo
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_NetResolver_proto_init() }
func file_proto_NetResolver_proto_init() {
	if File_proto_NetResolver_proto != nil {
		return
	}
	file_proto_Message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_NetResolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_NetResolver_proto_goTypes,
		DependencyIndexes: file_proto_NetResolver_proto_depIdxs,
	}.Build()
	File_proto_NetResolver_proto = out.File
	file_proto_NetResolver_proto_rawDesc = nil
	file_proto_NetResolver_proto_goTypes = nil
	file_proto_NetResolver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetResolverClient is the client API for NetResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetResolverClient interface {
	GetNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetInterfaceInfoList, error)
	GetCurrentWifiInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailWifiInfo, error)
	ScanWifiResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScanWifiInfoList, error)
	CheckNetworkConnectivity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error)
	GetActiveNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailActiveNetworkInfoList, error)
	GetPublicNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicNetworkInfo, error)
}

type netResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewNetResolverClient(cc grpc.ClientConnInterface) NetResolverClient {
	return &netResolverClient{cc}
}

func (c *netResolverClient) GetNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetInterfaceInfoList, error) {
	out := new(NetInterfaceInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) GetCurrentWifiInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailWifiInfo, error) {
	out := new(DetailWifiInfo)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetCurrentWifiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) ScanWifiResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScanWifiInfoList, error) {
	out := new(ScanWifiInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/ScanWifiResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) CheckNetworkConnectivity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/CheckNetworkConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) GetActiveNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DetailActiveNetworkInfoList, error) {
	out := new(DetailActiveNetworkInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetActiveNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netResolverClient) GetPublicNetworkInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicNetworkInfo, error) {
	out := new(PublicNetworkInfo)
	err := c.cc.Invoke(ctx, "/protobuf.NetResolver/GetPublicNetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetResolverServer is the server API for NetResolver service.
type NetResolverServer interface {
	GetNetworkInfo(context.Context, *Empty) (*NetInterfaceInfoList, error)
	GetCurrentWifiInfo(context.Context, *Empty) (*DetailWifiInfo, error)
	ScanWifiResult(context.Context, *Empty) (*ScanWifiInfoList, error)
	CheckNetworkConnectivity(context.Context, *Empty) (*Boolean, error)
	GetActiveNetworkInfo(context.Context, *Empty) (*DetailActiveNetworkInfoList, error)
	GetPublicNetworkInfo(context.Context, *Empty) (*PublicNetworkInfo, error)
}

// UnimplementedNetResolverServer can be embedded to have forward compatible implementations.
type UnimplementedNetResolverServer struct {
}

func (*UnimplementedNetResolverServer) GetNetworkInfo(context.Context, *Empty) (*NetInterfaceInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInfo not implemented")
}
func (*UnimplementedNetResolverServer) GetCurrentWifiInfo(context.Context, *Empty) (*DetailWifiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWifiInfo not implemented")
}
func (*UnimplementedNetResolverServer) ScanWifiResult(context.Context, *Empty) (*ScanWifiInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanWifiResult not implemented")
}
func (*UnimplementedNetResolverServer) CheckNetworkConnectivity(context.Context, *Empty) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNetworkConnectivity not implemented")
}
func (*UnimplementedNetResolverServer) GetActiveNetworkInfo(context.Context, *Empty) (*DetailActiveNetworkInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveNetworkInfo not implemented")
}
func (*UnimplementedNetResolverServer) GetPublicNetworkInfo(context.Context, *Empty) (*PublicNetworkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicNetworkInfo not implemented")
}

func RegisterNetResolverServer(s *grpc.Server, srv NetResolverServer) {
	s.RegisterService(&_NetResolver_serviceDesc, srv)
}

func _NetResolver_GetNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetNetworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_GetCurrentWifiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetCurrentWifiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetCurrentWifiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetCurrentWifiInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_ScanWifiResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).ScanWifiResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/ScanWifiResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).ScanWifiResult(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_CheckNetworkConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).CheckNetworkConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/CheckNetworkConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).CheckNetworkConnectivity(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_GetActiveNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetActiveNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetActiveNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetActiveNetworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetResolver_GetPublicNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetResolverServer).GetPublicNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.NetResolver/GetPublicNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetResolverServer).GetPublicNetworkInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.NetResolver",
	HandlerType: (*NetResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkInfo",
			Handler:    _NetResolver_GetNetworkInfo_Handler,
		},
		{
			MethodName: "GetCurrentWifiInfo",
			Handler:    _NetResolver_GetCurrentWifiInfo_Handler,
		},
		{
			MethodName: "ScanWifiResult",
			Handler:    _NetResolver_ScanWifiResult_Handler,
		},
		{
			MethodName: "CheckNetworkConnectivity",
			Handler:    _NetResolver_CheckNetworkConnectivity_Handler,
		},
		{
			MethodName: "GetActiveNetworkInfo",
			Handler:    _NetResolver_GetActiveNetworkInfo_Handler,
		},
		{
			MethodName: "GetPublicNetworkInfo",
			Handler:    _NetResolver_GetPublicNetworkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/NetResolver.proto",
}
