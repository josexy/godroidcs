// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlResolverClient is the client API for ControlResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlResolverClient interface {
	GetScreenBrightness(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error)
	SetScreenBrightness(ctx context.Context, in *Integer, opts ...grpc.CallOption) (*Empty, error)
	GetScreenBrightnessMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error)
	SetScreenBrightnessMode(ctx context.Context, in *Boolean, opts ...grpc.CallOption) (*Empty, error)
	GetClipboardText(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	SetClipboardText(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	GetVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error)
	SetVolume(ctx context.Context, in *Integer, opts ...grpc.CallOption) (*Empty, error)
	IncreaseVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	DecreaseVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartScreenCapture(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopScreenCapture(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartScreenRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopScreenRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
}

type controlResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewControlResolverClient(cc grpc.ClientConnInterface) ControlResolverClient {
	return &controlResolverClient{cc}
}

func (c *controlResolverClient) GetScreenBrightness(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error) {
	out := new(Integer)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/GetScreenBrightness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) SetScreenBrightness(ctx context.Context, in *Integer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/SetScreenBrightness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) GetScreenBrightnessMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error) {
	out := new(Integer)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/GetScreenBrightnessMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) SetScreenBrightnessMode(ctx context.Context, in *Boolean, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/SetScreenBrightnessMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) GetClipboardText(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/GetClipboardText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) SetClipboardText(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/SetClipboardText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) GetVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Integer, error) {
	out := new(Integer)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) SetVolume(ctx context.Context, in *Integer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) IncreaseVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/IncreaseVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) DecreaseVolume(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/DecreaseVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) StartScreenCapture(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/StartScreenCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) StopScreenCapture(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/StopScreenCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) StartScreenRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/StartScreenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlResolverClient) StopScreenRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/protobuf.ControlResolver/StopScreenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlResolverServer is the server API for ControlResolver service.
// All implementations must embed UnimplementedControlResolverServer
// for forward compatibility
type ControlResolverServer interface {
	GetScreenBrightness(context.Context, *Empty) (*Integer, error)
	SetScreenBrightness(context.Context, *Integer) (*Empty, error)
	GetScreenBrightnessMode(context.Context, *Empty) (*Integer, error)
	SetScreenBrightnessMode(context.Context, *Boolean) (*Empty, error)
	GetClipboardText(context.Context, *Empty) (*String, error)
	SetClipboardText(context.Context, *String) (*Empty, error)
	GetVolume(context.Context, *Empty) (*Integer, error)
	SetVolume(context.Context, *Integer) (*Empty, error)
	IncreaseVolume(context.Context, *Empty) (*Empty, error)
	DecreaseVolume(context.Context, *Empty) (*Empty, error)
	StartScreenCapture(context.Context, *Empty) (*Empty, error)
	StopScreenCapture(context.Context, *Empty) (*Empty, error)
	StartScreenRecord(context.Context, *Empty) (*Empty, error)
	StopScreenRecord(context.Context, *Empty) (*String, error)
	mustEmbedUnimplementedControlResolverServer()
}

// UnimplementedControlResolverServer must be embedded to have forward compatible implementations.
type UnimplementedControlResolverServer struct {
}

func (UnimplementedControlResolverServer) GetScreenBrightness(context.Context, *Empty) (*Integer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenBrightness not implemented")
}
func (UnimplementedControlResolverServer) SetScreenBrightness(context.Context, *Integer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScreenBrightness not implemented")
}
func (UnimplementedControlResolverServer) GetScreenBrightnessMode(context.Context, *Empty) (*Integer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenBrightnessMode not implemented")
}
func (UnimplementedControlResolverServer) SetScreenBrightnessMode(context.Context, *Boolean) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScreenBrightnessMode not implemented")
}
func (UnimplementedControlResolverServer) GetClipboardText(context.Context, *Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClipboardText not implemented")
}
func (UnimplementedControlResolverServer) SetClipboardText(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClipboardText not implemented")
}
func (UnimplementedControlResolverServer) GetVolume(context.Context, *Empty) (*Integer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedControlResolverServer) SetVolume(context.Context, *Integer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (UnimplementedControlResolverServer) IncreaseVolume(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseVolume not implemented")
}
func (UnimplementedControlResolverServer) DecreaseVolume(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseVolume not implemented")
}
func (UnimplementedControlResolverServer) StartScreenCapture(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScreenCapture not implemented")
}
func (UnimplementedControlResolverServer) StopScreenCapture(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScreenCapture not implemented")
}
func (UnimplementedControlResolverServer) StartScreenRecord(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScreenRecord not implemented")
}
func (UnimplementedControlResolverServer) StopScreenRecord(context.Context, *Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScreenRecord not implemented")
}
func (UnimplementedControlResolverServer) mustEmbedUnimplementedControlResolverServer() {}

// UnsafeControlResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlResolverServer will
// result in compilation errors.
type UnsafeControlResolverServer interface {
	mustEmbedUnimplementedControlResolverServer()
}

func RegisterControlResolverServer(s grpc.ServiceRegistrar, srv ControlResolverServer) {
	s.RegisterService(&ControlResolver_ServiceDesc, srv)
}

func _ControlResolver_GetScreenBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).GetScreenBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/GetScreenBrightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).GetScreenBrightness(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_SetScreenBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).SetScreenBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/SetScreenBrightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).SetScreenBrightness(ctx, req.(*Integer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_GetScreenBrightnessMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).GetScreenBrightnessMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/GetScreenBrightnessMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).GetScreenBrightnessMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_SetScreenBrightnessMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boolean)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).SetScreenBrightnessMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/SetScreenBrightnessMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).SetScreenBrightnessMode(ctx, req.(*Boolean))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_GetClipboardText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).GetClipboardText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/GetClipboardText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).GetClipboardText(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_SetClipboardText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).SetClipboardText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/SetClipboardText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).SetClipboardText(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).GetVolume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).SetVolume(ctx, req.(*Integer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_IncreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).IncreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/IncreaseVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).IncreaseVolume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_DecreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).DecreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/DecreaseVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).DecreaseVolume(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_StartScreenCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).StartScreenCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/StartScreenCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).StartScreenCapture(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_StopScreenCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).StopScreenCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/StopScreenCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).StopScreenCapture(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_StartScreenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).StartScreenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/StartScreenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).StartScreenRecord(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlResolver_StopScreenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlResolverServer).StopScreenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ControlResolver/StopScreenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlResolverServer).StopScreenRecord(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlResolver_ServiceDesc is the grpc.ServiceDesc for ControlResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ControlResolver",
	HandlerType: (*ControlResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScreenBrightness",
			Handler:    _ControlResolver_GetScreenBrightness_Handler,
		},
		{
			MethodName: "SetScreenBrightness",
			Handler:    _ControlResolver_SetScreenBrightness_Handler,
		},
		{
			MethodName: "GetScreenBrightnessMode",
			Handler:    _ControlResolver_GetScreenBrightnessMode_Handler,
		},
		{
			MethodName: "SetScreenBrightnessMode",
			Handler:    _ControlResolver_SetScreenBrightnessMode_Handler,
		},
		{
			MethodName: "GetClipboardText",
			Handler:    _ControlResolver_GetClipboardText_Handler,
		},
		{
			MethodName: "SetClipboardText",
			Handler:    _ControlResolver_SetClipboardText_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _ControlResolver_GetVolume_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _ControlResolver_SetVolume_Handler,
		},
		{
			MethodName: "IncreaseVolume",
			Handler:    _ControlResolver_IncreaseVolume_Handler,
		},
		{
			MethodName: "DecreaseVolume",
			Handler:    _ControlResolver_DecreaseVolume_Handler,
		},
		{
			MethodName: "StartScreenCapture",
			Handler:    _ControlResolver_StartScreenCapture_Handler,
		},
		{
			MethodName: "StopScreenCapture",
			Handler:    _ControlResolver_StopScreenCapture_Handler,
		},
		{
			MethodName: "StartScreenRecord",
			Handler:    _ControlResolver_StartScreenRecord_Handler,
		},
		{
			MethodName: "StopScreenRecord",
			Handler:    _ControlResolver_StopScreenRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ControlResolver.proto",
}
