// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhoneResolverClient is the client API for PhoneResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneResolverClient interface {
	DialPhone(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	CallPhone(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
}

type phoneResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneResolverClient(cc grpc.ClientConnInterface) PhoneResolverClient {
	return &phoneResolverClient{cc}
}

func (c *phoneResolverClient) DialPhone(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.PhoneResolver/DialPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneResolverClient) CallPhone(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.PhoneResolver/CallPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneResolverServer is the server API for PhoneResolver service.
// All implementations must embed UnimplementedPhoneResolverServer
// for forward compatibility
type PhoneResolverServer interface {
	DialPhone(context.Context, *String) (*Empty, error)
	CallPhone(context.Context, *String) (*Empty, error)
	mustEmbedUnimplementedPhoneResolverServer()
}

// UnimplementedPhoneResolverServer must be embedded to have forward compatible implementations.
type UnimplementedPhoneResolverServer struct {
}

func (UnimplementedPhoneResolverServer) DialPhone(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialPhone not implemented")
}
func (UnimplementedPhoneResolverServer) CallPhone(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallPhone not implemented")
}
func (UnimplementedPhoneResolverServer) mustEmbedUnimplementedPhoneResolverServer() {}

// UnsafePhoneResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneResolverServer will
// result in compilation errors.
type UnsafePhoneResolverServer interface {
	mustEmbedUnimplementedPhoneResolverServer()
}

func RegisterPhoneResolverServer(s grpc.ServiceRegistrar, srv PhoneResolverServer) {
	s.RegisterService(&PhoneResolver_ServiceDesc, srv)
}

func _PhoneResolver_DialPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneResolverServer).DialPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PhoneResolver/DialPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneResolverServer).DialPhone(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneResolver_CallPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneResolverServer).CallPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PhoneResolver/CallPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneResolverServer).CallPhone(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

// PhoneResolver_ServiceDesc is the grpc.ServiceDesc for PhoneResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhoneResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PhoneResolver",
	HandlerType: (*PhoneResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DialPhone",
			Handler:    _PhoneResolver_DialPhone_Handler,
		},
		{
			MethodName: "CallPhone",
			Handler:    _PhoneResolver_CallPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/PhoneResolver.proto",
}
