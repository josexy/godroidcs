// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FsResolverClient is the client API for FsResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FsResolverClient interface {
	GetBaseFileTree(ctx context.Context, in *StringTuple, opts ...grpc.CallOption) (*String, error)
	UploadGeneralFile(ctx context.Context, opts ...grpc.CallOption) (FsResolver_UploadGeneralFileClient, error)
	DownloadGeneralFile(ctx context.Context, in *String, opts ...grpc.CallOption) (FsResolver_DownloadGeneralFileClient, error)
	ListDir(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*FileInfoList, error)
	DeleteFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	CreateFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	MkDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	RmDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	Move(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	Rename(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	Copy(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	ReadText(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error)
	WriteText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
	AppendText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error)
}

type fsResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewFsResolverClient(cc grpc.ClientConnInterface) FsResolverClient {
	return &fsResolverClient{cc}
}

func (c *fsResolverClient) GetBaseFileTree(ctx context.Context, in *StringTuple, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/GetBaseFileTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) UploadGeneralFile(ctx context.Context, opts ...grpc.CallOption) (FsResolver_UploadGeneralFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FsResolver_ServiceDesc.Streams[0], "/protobuf.FsResolver/UploadGeneralFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsResolverUploadGeneralFileClient{stream}
	return x, nil
}

type FsResolver_UploadGeneralFileClient interface {
	Send(*ParamBytes) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type fsResolverUploadGeneralFileClient struct {
	grpc.ClientStream
}

func (x *fsResolverUploadGeneralFileClient) Send(m *ParamBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fsResolverUploadGeneralFileClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsResolverClient) DownloadGeneralFile(ctx context.Context, in *String, opts ...grpc.CallOption) (FsResolver_DownloadGeneralFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FsResolver_ServiceDesc.Streams[1], "/protobuf.FsResolver/DownloadGeneralFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsResolverDownloadGeneralFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FsResolver_DownloadGeneralFileClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type fsResolverDownloadGeneralFileClient struct {
	grpc.ClientStream
}

func (x *fsResolverDownloadGeneralFileClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsResolverClient) ListDir(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*FileInfoList, error) {
	out := new(FileInfoList)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/ListDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) DeleteFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) CreateFile(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) MkDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/MkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) RmDir(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/RmDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) Move(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) Rename(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) Copy(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) ReadText(ctx context.Context, in *String, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/ReadText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) WriteText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/WriteText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsResolverClient) AppendText(ctx context.Context, in *StringPair, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FsResolver/AppendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsResolverServer is the server API for FsResolver service.
// All implementations must embed UnimplementedFsResolverServer
// for forward compatibility
type FsResolverServer interface {
	GetBaseFileTree(context.Context, *StringTuple) (*String, error)
	UploadGeneralFile(FsResolver_UploadGeneralFileServer) error
	DownloadGeneralFile(*String, FsResolver_DownloadGeneralFileServer) error
	ListDir(context.Context, *StringPair) (*FileInfoList, error)
	DeleteFile(context.Context, *String) (*Status, error)
	CreateFile(context.Context, *String) (*Status, error)
	MkDir(context.Context, *String) (*Status, error)
	RmDir(context.Context, *String) (*Status, error)
	Move(context.Context, *StringPair) (*Status, error)
	Rename(context.Context, *StringPair) (*Status, error)
	Copy(context.Context, *StringPair) (*Status, error)
	ReadText(context.Context, *String) (*Status, error)
	WriteText(context.Context, *StringPair) (*Status, error)
	AppendText(context.Context, *StringPair) (*Status, error)
	mustEmbedUnimplementedFsResolverServer()
}

// UnimplementedFsResolverServer must be embedded to have forward compatible implementations.
type UnimplementedFsResolverServer struct {
}

func (UnimplementedFsResolverServer) GetBaseFileTree(context.Context, *StringTuple) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseFileTree not implemented")
}
func (UnimplementedFsResolverServer) UploadGeneralFile(FsResolver_UploadGeneralFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadGeneralFile not implemented")
}
func (UnimplementedFsResolverServer) DownloadGeneralFile(*String, FsResolver_DownloadGeneralFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadGeneralFile not implemented")
}
func (UnimplementedFsResolverServer) ListDir(context.Context, *StringPair) (*FileInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedFsResolverServer) DeleteFile(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFsResolverServer) CreateFile(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFsResolverServer) MkDir(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (UnimplementedFsResolverServer) RmDir(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmDir not implemented")
}
func (UnimplementedFsResolverServer) Move(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFsResolverServer) Rename(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFsResolverServer) Copy(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFsResolverServer) ReadText(context.Context, *String) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadText not implemented")
}
func (UnimplementedFsResolverServer) WriteText(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteText not implemented")
}
func (UnimplementedFsResolverServer) AppendText(context.Context, *StringPair) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendText not implemented")
}
func (UnimplementedFsResolverServer) mustEmbedUnimplementedFsResolverServer() {}

// UnsafeFsResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FsResolverServer will
// result in compilation errors.
type UnsafeFsResolverServer interface {
	mustEmbedUnimplementedFsResolverServer()
}

func RegisterFsResolverServer(s grpc.ServiceRegistrar, srv FsResolverServer) {
	s.RegisterService(&FsResolver_ServiceDesc, srv)
}

func _FsResolver_GetBaseFileTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTuple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).GetBaseFileTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/GetBaseFileTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).GetBaseFileTree(ctx, req.(*StringTuple))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_UploadGeneralFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FsResolverServer).UploadGeneralFile(&fsResolverUploadGeneralFileServer{stream})
}

type FsResolver_UploadGeneralFileServer interface {
	SendAndClose(*Status) error
	Recv() (*ParamBytes, error)
	grpc.ServerStream
}

type fsResolverUploadGeneralFileServer struct {
	grpc.ServerStream
}

func (x *fsResolverUploadGeneralFileServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fsResolverUploadGeneralFileServer) Recv() (*ParamBytes, error) {
	m := new(ParamBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FsResolver_DownloadGeneralFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FsResolverServer).DownloadGeneralFile(m, &fsResolverDownloadGeneralFileServer{stream})
}

type FsResolver_DownloadGeneralFileServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type fsResolverDownloadGeneralFileServer struct {
	grpc.ServerStream
}

func (x *fsResolverDownloadGeneralFileServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _FsResolver_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).ListDir(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).DeleteFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).CreateFile(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/MkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).MkDir(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_RmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).RmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/RmDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).RmDir(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).Move(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).Rename(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).Copy(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_ReadText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).ReadText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/ReadText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).ReadText(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_WriteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).WriteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/WriteText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).WriteText(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsResolver_AppendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsResolverServer).AppendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FsResolver/AppendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsResolverServer).AppendText(ctx, req.(*StringPair))
	}
	return interceptor(ctx, in, info, handler)
}

// FsResolver_ServiceDesc is the grpc.ServiceDesc for FsResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FsResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FsResolver",
	HandlerType: (*FsResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBaseFileTree",
			Handler:    _FsResolver_GetBaseFileTree_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _FsResolver_ListDir_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FsResolver_DeleteFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FsResolver_CreateFile_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _FsResolver_MkDir_Handler,
		},
		{
			MethodName: "RmDir",
			Handler:    _FsResolver_RmDir_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FsResolver_Move_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FsResolver_Rename_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FsResolver_Copy_Handler,
		},
		{
			MethodName: "ReadText",
			Handler:    _FsResolver_ReadText_Handler,
		},
		{
			MethodName: "WriteText",
			Handler:    _FsResolver_WriteText_Handler,
		},
		{
			MethodName: "AppendText",
			Handler:    _FsResolver_AppendText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadGeneralFile",
			Handler:       _FsResolver_UploadGeneralFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadGeneralFile",
			Handler:       _FsResolver_DownloadGeneralFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/FsResolver.proto",
}
